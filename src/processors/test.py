import os

from bs4 import BeautifulSoup

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
from src.processors.utils.formatters import clean_message_text


def test_rule(
    content: str | None,
    subject: str,
    sender: str,
    attachments: list[tuple[str, bytes]] | None,
):
    """
    –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–æ–∂–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–ª–æ –ø–∏—Å—å–º–∞.
    –¢–µ–ø–µ—Ä—å –æ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ —Ç–µ–ª–æ –ø–∏—Å—å–º–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    """
    # –ê–Ω–∞–ª–∏–∑ –≤–ª–æ–∂–µ–Ω–∏–π (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    print("\n--- –ê–Ω–∞–ª–∏–∑ –≤–ª–æ–∂–µ–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ 'test_rule' ---")
    if attachments and len(attachments) > 0:
        num_files = len(attachments)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {num_files}")
        extensions = [
            os.path.splitext(filename)[1].lower() or "[–Ω–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è]"
            for filename, _ in attachments
        ]
        print(f"üè∑Ô∏è  –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {list(set(extensions))}")
    else:
        print("‚ÑπÔ∏è  –í–ª–æ–∂–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø–∏—Å—å–º–µ.")
    print("--------------------------------------------------\n")

    if not content:
        print(
            "‚ö†Ô∏è  –¢–µ–ª–æ –ø–∏—Å—å–º–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (content is None). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É HTML."
        )
        return ""  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

    # –≠—Ç–æ—Ç –∫–æ–¥ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ content —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    print("--- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞ ---")
    # –ü–∞—Ä—Å–∏–Ω–≥ HTML
    soup = BeautifulSoup(content, "html.parser")

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–≥–∏ <style>
    for style in soup.find_all("style"):
        style.decompose()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –≤ –≤–∏–¥–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    raw_text = soup.get_text(separator="\n")
    cleaned_text = clean_message_text(raw_text)

    print(cleaned_text)

    return cleaned_text
